# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BaseTask {
  id: ID!
  title: String!
  description: String!
  status: String!
  value: Float!
  createdAt: DateTime!
  depending: String
  organization: Organization!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  address: String!
  nickname: String!
  primaryRol: String
  roles: [String!]!
  isActive: Boolean!
  lastUpdateBy: User
  organizations: [OrganizationUser!]!
}

type OrganizationUser {
  id: ID!
  role: String!
}

type Organization {
  id: ID!
  name: String!
  description: String!
  moderatorsNumber: Float!
  img: String
  fieldsBase: [String!]!
  OrganizationUsers: [OrganizationUser!]!
  epochs: [Epoch!]
  baseTasks: [BaseTask!]
}

type Epoch {
  id: ID!
  duration: Float!
  startDate: Float!
  endDate: Float!
  isActive: Boolean!
  description: String!
  organization: Organization!
  tasks: [Task!]!
}

type Task {
  id: ID!
  title: String!
  description: String!
  status: String!
  value: Float!
  createdAt: DateTime!
  depending: String
  epochs: [Epoch!]!
}

type AuthResponse {
  token: String!
  user: User!
}

type Query {
  tasks: [Task!]!
  task(id: ID!): Task!
  users(roles: [ValidRoles!] = []): [User!]!
  user(id: ID!): User!
  reValidate: AuthResponse!
  findAllOrgs: [Organization!]!
  findOrganization(id: ID!): Organization!
  organizationOfUser: [Organization!]!
  epochs: [Epoch!]!
  epoch(id: Int!): Epoch!
  baseTasks: [BaseTask!]!
  baseTask(id: Int!): BaseTask!
}

"""Valid roles for users when login"""
enum ValidRoles {
  admin
  user
  superUser
}

type Mutation {
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  removeTask(id: ID!): Task!
  blockUser(id: ID!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  signUp(signUpInput: SignUpInput!): AuthResponse!
  login(loginInput: LoginInput!): AuthResponse!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  removeOrganization(id: Int!): Organization!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createEpoch(createEpochInput: CreateEpochInput!): Epoch!
  updateEpoch(updateEpochInput: UpdateEpochInput!): Epoch!
  removeEpoch(id: Int!): Epoch!
  createBaseTask(createBaseTaskInput: CreateBaseTaskInput!): BaseTask!
  updateBaseTask(updateBaseTaskInput: UpdateBaseTaskInput!): BaseTask!
  removeBaseTask(id: Int!): BaseTask!
}

input CreateTaskInput {
  title: String!
  description: String!
  status: String
  value: Float!
  createdAt: DateTime!
  depending: String
}

input UpdateTaskInput {
  title: String
  description: String
  status: String
  value: Float
  createdAt: DateTime
  depending: String
  id: ID!
}

input UpdateUserInput {
  address: String
  nickname: String
  id: ID!
  roles: [ValidRoles!]
  isActive: Boolean
  primaryRol: ValidPrimaryRol
}

"""Valid roles for users to pick when login"""
enum ValidPrimaryRol {
  daoManager
  daoContributor
}

input SignUpInput {
  address: String!
  nickname: String!
}

input LoginInput {
  address: String!
}

input UpdateOrganizationInput {
  name: String
  description: String
  img: String
  id: Int!
}

input CreateOrganizationInput {
  name: String!
  description: String
  img: String
}

input CreateEpochInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateEpochInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateBaseTaskInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateBaseTaskInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}